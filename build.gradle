buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:3.5.0"
    }
}

plugins {
	id 'java'
	id 'jacoco'
	id 'org.jetbrains.kotlin.jvm' version '2.2.0-RC3'
	id 'org.jetbrains.kotlin.plugin.spring' version '2.2.0-RC3'
	id 'org.springframework.boot' version '3.5.0'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'app.carrillo'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
    implementation 'io.projectreactor.kotlin:reactor-kotlin-extensions'
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
    implementation 'org.springdoc:springdoc-openapi-starter-webflux-ui:2.5.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    developmentOnly 'org.springframework.boot:spring-boot-docker-compose'
    implementation 'org.jetbrains.kotlin:kotlin-reflect'
    compileOnly 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.2.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

kotlin {
    compilerOptions {
        freeCompilerArgs.addAll '-Xjsr305=strict'
    }
}

sourceSets {
    test {
        kotlin {
            srcDirs = ['src/test/kotlin']
        }
    }
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    dependsOn test
    executionData fileTree(dir: "$buildDir/jacoco", include: "**/*.exec")
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude Swagger configuration classes
                '**/SwaggerConfig*',
                '**/SwaggerConfig.class',
                '**/SwaggerConfig$*.class',
                // Exclude Spring Boot auto-configuration
                '**/Application*',
                '**/Application.class',
                '**/Application$*.class',
                // Exclude configuration classes
                '**/*Config*',
                '**/*Configuration*'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                // Exclude Swagger configuration classes
                '**/SwaggerConfig*',
                '**/SwaggerConfig.class',
                '**/SwaggerConfig$*.class',
                // Exclude Spring Boot auto-configuration
                '**/Application*',
                '**/Application.class',
                '**/Application$*.class',
                // Exclude configuration classes
                '**/*Config*',
                '**/*Configuration*'
            ])
        }))
    }
    
    violationRules {
        rule {
            limit {
                minimum = 0.80
            }
        }
    }
}