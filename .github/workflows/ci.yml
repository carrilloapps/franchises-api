name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:
    inputs:
      skip_tests:
        description: '⏭️ Skip tests'
        required: false
        default: false
        type: boolean

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true
  JAVA_VERSION: '17'

jobs:
  test:
    name: 🧪 Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      pull-requests: write
      checks: write
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 40s
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 📦 Ensure Gradle wrapper JAR exists
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "Gradle wrapper JAR not found, downloading..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.5.0/gradle/wrapper/gradle-wrapper.jar
        else
          echo "Gradle wrapper JAR found"
        fi
      
    - name: 🔍 Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3
      
    - name: 🧪 Run tests
      if: ${{ !inputs.skip_tests }}
      run: ./gradlew test --continue --build-cache --parallel
      env:
        SPRING_DATA_MONGODB_URI: mongodb://localhost:27017/franchises-test
        SPRING_PROFILES_ACTIVE: test
        
    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: (success() || failure()) && !inputs.skip_tests
      continue-on-error: true
      with:
        name: 📋 Test Results
        path: build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: false
        
    - name: 📤 Upload test results
      uses: actions/upload-artifact@v4
      if: always() && !inputs.skip_tests
      with:
        name: 📊-test-results-${{ github.run_number }}
        path: |
          build/test-results/
          build/reports/tests/
        retention-days: 30
          
    - name: 📈 Generate code coverage
      if: success() && !inputs.skip_tests
      run: ./gradlew jacocoTestReport --build-cache
      
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      if: success() && !inputs.skip_tests
      with:
        file: build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true
        
    - name: 📋 Coverage verification
      if: success() && !inputs.skip_tests
      run: ./gradlew jacocoTestCoverageVerification
      
    - name: 💬 Comment test results on PR
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always() && github.event_name == 'pull_request' && !inputs.skip_tests
      continue-on-error: true
      with:
        files: build/test-results/test/*.xml
        comment_title: 🧪 Test Results
        check_name: Test Results
        fail_on: "test failures"
        action_fail: true
        
  build:
    name: 🏗️ Build Application
    needs: test
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event_name == 'push' && !failure()
    
    strategy:
      matrix:
        profile: [prod, dev]
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🏗️ Build application (${{ matrix.profile }})
      run: ./gradlew build -x test --build-cache --parallel
      env:
        SPRING_PROFILES_ACTIVE: ${{ matrix.profile }}
        
    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 🏗️-build-artifacts-${{ matrix.profile }}-${{ github.run_number }}
        path: |
          build/libs/
          build/distributions/
        retention-days: 7
          
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'
        
    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: 🔍 Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: java
        
    - name: 🏗️ Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:java"
        
    - name: 🛡️ Run dependency check
      run: ./gradlew dependencyCheckAnalyze --build-cache
      continue-on-error: true
      
    - name: 🔍 OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      continue-on-error: true
      with:
        project: 'franchises-api'
        path: '.'
        format: 'ALL'
        args: >
          --enableRetired
          --enableExperimental
          --failOnCVSS 7
          
    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: 🔒-security-scan-results-${{ github.run_number }}
        path: |
          build/reports/dependency-check-report.html
          reports/
          dependency-check-report/
        retention-days: 30
        
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, build]
    if: always() && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop' || github.event_name == 'pull_request')
    
    steps:
    - name: 📢 Notify success
      if: needs.test.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ Pipeline completed successfully!"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🔒 Security: ${{ needs.security-scan.result }}"
        
    - name: 🚨 Notify failure
      if: needs.test.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Pipeline failed!"
        echo "🧪 Tests: ${{ needs.test.result }}"
        echo "🏗️ Build: ${{ needs.build.result }}"
        echo "🔒 Security: ${{ needs.security-scan.result }}"
        exit 1