name: 🐳 Docker Image Build & Push

on:
  release:
    types:
      - published
  workflow_dispatch:
    inputs:
      tag:
        description: '🏷️ Custom tag for the Docker image'
        required: false
        default: 'latest'
      push_to_registry:
        description: '📤 Push to registry'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  JAVA_VERSION: '17'
  GRADLE_VERSION: '8.5'

jobs:
  build_and_push:
    name: 🏗️ Build & Push Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    permissions:
      contents: read
      packages: write
      security-events: write
      id-token: write
      attestations: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-url: ${{ steps.build.outputs.image-url }}

    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: ☕ Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: 'gradle'

    - name: 📦 Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
          ~/.gradle/build-cache
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: 🔧 Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: 🔍 Ensure gradle-wrapper.jar exists
      run: |
        if [ ! -f "gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "⬇️ Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.5.0/gradle/wrapper/gradle-wrapper.jar
          echo "✅ gradle-wrapper.jar downloaded successfully"
        else
          echo "✅ gradle-wrapper.jar already exists"
        fi

    - name: 📋 Validate Gradle wrapper
      uses: gradle/actions/wrapper-validation@v3

    - name: 🏗️ Build application
      run: |
        echo "🏗️ Building application..."
        ./gradlew bootJar --build-cache --parallel --no-daemon
        echo "✅ Application built successfully"
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

    - name: 🧪 Run tests
      run: |
        echo "🧪 Running tests..."
        ./gradlew test --build-cache --parallel --no-daemon
        echo "✅ Tests completed successfully"
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

    - name: 📊 Run Jacoco test coverage verification
      run: |
        echo "📊 Running Jacoco test coverage verification..."
        ./gradlew jacocoTestCoverageVerification --build-cache --parallel --no-daemon
        echo "✅ Coverage verification completed successfully"
      env:
        GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.parallel=true -Dorg.gradle.caching=true

    - name: 📊 Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 🧪 Test Results
        path: build/test-results/test/*.xml
        reporter: java-junit
        fail-on-error: false

    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver-opts: |
          image=moby/buildkit:buildx-stable-1
          network=host

    - name: 🔐 Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.created=${{ github.event.release.published_at || github.event.head_commit.timestamp }}
          org.opencontainers.image.authors=${{ github.actor }}
          org.opencontainers.image.url=https://github.com/${{ github.repository }}
          org.opencontainers.image.documentation=https://github.com/${{ github.repository }}#readme
          org.opencontainers.image.source=https://github.com/${{ github.repository }}
          org.opencontainers.image.version=${{ github.ref_name }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.vendor=carrilloapps
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.title=Franchises API
          org.opencontainers.image.description=A robust and scalable RESTful API for comprehensive management of franchises, branches, and products
          maintainer=carrilloapps
          org.opencontainers.image.base.name=eclipse-temurin:17-jre-alpine

    - name: 🐳 Build and push Docker image
      id: build
      uses: docker/build-push-action@v6
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ (github.event_name != 'pull_request') && (github.event.inputs.push_to_registry != 'false') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: true
        sbom: true
        build-args: |
          JAVA_VERSION=${{ env.JAVA_VERSION }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}
          VERSION=${{ github.ref_name }}

    - name: 🔍 Scan Docker image with Trivy
      uses: aquasecurity/trivy-action@master
      if: steps.build.outputs.digest
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: steps.build.outputs.digest
      with:
        sarif_file: 'trivy-results.sarif'

    - name: 🔐 Generate artifact attestation
      uses: actions/attest-build-provenance@v1
      if: steps.build.outputs.digest
      with:
        subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        subject-digest: ${{ steps.build.outputs.digest }}
        push-to-registry: true

    - name: 📋 Image summary
      if: steps.build.outputs.digest
      run: |
        echo "## 🐳 Docker Image Built Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Image Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ env.REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ env.IMAGE_NAME }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest:** \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Tags:** ${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Pull Command" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  notify:
    name: 📢 Notify Build Status
    runs-on: ubuntu-latest
    needs: build_and_push
    if: always() && github.event_name == 'release'
    
    steps:
    - name: 📢 Notify success
      if: needs.build_and_push.result == 'success'
      run: |
        echo "✅ Docker image built and pushed successfully!"
        echo "🐳 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
        echo "📋 Digest: ${{ needs.build_and_push.outputs.image-digest }}"
        
    - name: 🚨 Notify failure
      if: needs.build_and_push.result == 'failure'
      run: |
        echo "❌ Docker image build failed!"
        exit 1